scalar LocalDateTime
scalar LocalDate

extend type Mutation {
    saveEvent(postEventRequest: PostEventRequest): ID
    updateEvent(eventId: ID!, updateEventRequest: UpdateEventRequest!): ID
    deleteEvent(eventId: ID!): ID
}

extend type Query {
    event(eventId: ID!): Event
    events(startDate: LocalDate!, endDate: LocalDate): [CalendarEvent]
}

### EVENT
type Event {
    id: ID!
    title: String!
    startDateTime: LocalDateTime!
    endDateTime: LocalDateTime!
    isAllDay: Boolean!
    label: Label!
    alarm: Alarm
    frequency: Frequency
    memberId: String!
}

### Calendar Event
type CalendarEvent {
    id: ID!
    title: String!
    startDate: LocalDate!
    endDate: LocalDate!
    labelColor: String!
}

enum Alarm {
    NONE
    D_DAY
    D_7DAY
    BEFORE_10
    BEFORE_30
    BEFORE_60
}

input PostEventRequest {
    title: String!
    startDateTime: LocalDateTime!
    endDateTime: LocalDateTime
    isAllDay: Boolean!
    alarm: Alarm
    labelId: String!
    frequency: Frequency
}

input UpdateEventRequest {
    title: String
    startDateTime: LocalDateTime
    endDateTime: LocalDateTime
    isAllDay: Boolean
    alarm: Alarm
    labelId: String
    frequency: Frequency
}

enum Frequency {
    NONE
    DAILY
    WEEKLY
    MONTHLY
    YEARLY
}
